openapi: 3.0.3
info:
  title: 팀 Todo 실시간 알림 시스템 API
  version: 1.0.0
  description: 팀 Todo 및 실시간 알림, 소셜 로그인 기능을 포함한 백엔드 API 문서입니다.

servers:
  - url: https://api.yourdomain.com
    description: 운영 서버

tags:
  - name: Users
    description: 사용자 관련 API
  - name: Teams
    description: 팀 관리 및 멤버 관련 API
  - name: Todos
    description: 투두 관리 API
  - name: Notifications
    description: 실시간 알림 관련 API
  - name: OAuth
    description: 소셜 로그인 관련 API

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserSignupRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: ikhyeon
          description: 사용자의 이름
        email:
          type: string
          format: email
          example: ikhyeon@example.com
          description: 이메일 주소 (로그인 ID)
        password:
          type: string
          format: password
          example: "StrongPassword123!"
          description: 비밀번호
    UserResponse:
      type: object
      properties:
        userId:
          type: integer
          example: 1
          description: 사용자 고유 ID
        username:
          type: string
          example: ikhyeon
          description: 사용자 이름
        email:
          type: string
          example: ikhyeon@example.com
          description: 이메일 주소
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: ikhyeon@example.com
          description: 로그인 이메일
        password:
          type: string
          format: password
          example: "StrongPassword123!"
          description: 로그인 비밀번호
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          description: JWT 인증 토큰
    TeamRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Awesome Team
          description: 팀 이름
    TeamResponse:
      type: object
      properties:
        teamId:
          type: integer
          example: 1
          description: 팀 고유 ID
        name:
          type: string
          example: Awesome Team
          description: 팀 이름
    UserDto:
      type: object
      properties:
        userId:
          type: integer
          example: 2
          description: 사용자 ID
        role:
          type: string
          enum: [LEADER, MEMBER]
          example: MEMBER
          description: 팀 내 역할
    TodoCreateRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: 할 일
          description: 투두 제목
        description:
          type: string
          example: 상세 내용
          description: 투두 상세 설명
        dueDate:
          type: string
          format: date-time
          example: 2025-07-20T23:59:59
          description: 마감일시 (ISO 8601)
    TodoResponse:
      type: object
      properties:
        todoId:
          type: integer
          example: 1
          description: 투두 고유 ID
        title:
          type: string
          example: 할 일
          description: 투두 제목
        description:
          type: string
          example: 상세 내용
          description: 투두 상세 설명
        dueDate:
          type: string
          format: date-time
          example: 2025-07-20T23:59:59
          description: 마감일시
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE]
          example: TODO
          description: 투두 상태
    NotificationResponse:
      type: object
      properties:
        notificationId:
          type: integer
          example: 1
          description: 알림 고유 ID
        message:
          type: string
          example: 새로운 투두가 생성되었습니다.
          description: 알림 메시지 내용
        isRead:
          type: boolean
          example: false
          description: 읽음 여부
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
          description: 에러 코드
        message:
          type: string
          example: 잘못된 요청입니다.
          description: 에러 메시지

  responses:
    UnauthorizedError:
      description: 인증 실패
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFoundError:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequestError:
      description: 잘못된 요청
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

security:
  - bearerAuth: []

paths:
  /api/users/signup:
    post:
      tags: [Users]
      summary: 회원가입
      description: 새 사용자를 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignupRequest'
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/users/login:
    post:
      tags: [Users]
      summary: 로그인
      description: 이메일과 비밀번호로 로그인하고 JWT 토큰을 발급받습니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공 및 토큰 발급
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/users/me:
    get:
      tags: [Users]
      summary: 내 프로필 조회
      description: 인증된 사용자의 프로필 정보를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 사용자 정보 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      tags: [Users]
      summary: 내 프로필 수정
      description: 사용자 이름 등 프로필 정보를 수정합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: newname
      responses:
        '200':
          description: 수정된 사용자 정보 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/teams:
    get:
      tags: [Teams]
      summary: 가입된 팀 목록 조회
      description: 사용자가 가입한 팀들의 리스트를 반환합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 팀 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamResponse'

    post:
      tags: [Teams]
      summary: 새 팀 생성
      description: 새로운 팀을 생성합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
      responses:
        '201':
          description: 생성된 팀 정보 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/teams/{teamId}:
    get:
      tags: [Teams]
      summary: 팀 상세 조회
      description: 특정 팀의 상세 정보를 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: 팀 상세 정보 반환
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamId:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Awesome Team
                  members:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDto'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags: [Teams]
      summary: 팀 이름 수정
      description: 팀 이름을 변경합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New Team Name
      responses:
        '200':
          description: 수정된 팀 정보 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/teams/{teamId}/leave:
    delete:
      tags: [Teams]
      summary: 팀 탈퇴
      description: 사용자가 특정 팀에서 탈퇴합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 팀 탈퇴 완료 메시지
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 팀 탈퇴 완료
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/teams/{teamId}/members:
    post:
      tags: [Teams]
      summary: 팀 멤버 초대
      description: 이메일을 통해 팀 멤버를 초대합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - role
              properties:
                email:
                  type: string
                  format: email
                  example: invitee@example.com
                role:
                  type: string
                  enum: [LEADER, MEMBER]
                  example: MEMBER
      responses:
        '201':
          description: 초대된 멤버 정보 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/teams/{teamId}/members/{userId}:
    put:
      tags: [Teams]
      summary: 팀 멤버 역할 변경
      description: 특정 팀 멤버의 역할을 변경합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [LEADER, MEMBER]
                  example: LEADER
      responses:
        '200':
          description: 변경된 멤버 역할 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags: [Teams]
      summary: 팀 멤버 강퇴
      description: 팀에서 특정 멤버를 강제로 제거합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 멤버 강퇴 완료 메시지
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 멤버 강퇴 완료
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/teams/{teamId}/todos:
    get:
      tags: [Todos]
      summary: 팀 투두 리스트 조회
      description: 특정 팀의 투두 리스트를 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 투두 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoResponse'

    post:
      tags: [Todos]
      summary: 투두 생성
      description: 특정 팀에 새 투두를 생성합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreateRequest'
      responses:
        '201':
          description: 생성된 투두 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/todos/{todoId}:
    get:
      tags: [Todos]
      summary: 투두 상세 조회
      description: 특정 투두의 상세 정보를 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: todoId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 투두 상세 정보 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags: [Todos]
      summary: 투두 수정
      description: 투두 제목, 설명, 마감일 등 정보를 수정합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: todoId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: 변경된 제목
                description:
                  type: string
                  example: 변경된 내용
                dueDate:
                  type: string
                  format: date-time
                  example: 2025-07-22T12:00:00
      responses:
        '200':
          description: 수정된 투두 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags: [Todos]
      summary: 투두 삭제
      description: 특정 투두를 삭제합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: todoId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 삭제 완료 메시지
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 삭제 완료
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/todos/{todoId}/status:
    patch:
      tags: [Todos]
      summary: 투두 상태 변경
      description: 투두의 상태를 TODO, IN_PROGRESS, DONE 중 하나로 변경합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: todoId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [TODO, IN_PROGRESS, DONE]
                  example: DONE
      responses:
        '200':
          description: 상태 변경된 투두 반환
          content:
            application/json:
              schema:
                type: object
                properties:
                  todoId:
                    type: integer
                    example: 1
                  status:
                    type: string
                    example: DONE
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/notifications:
    get:
      tags: [Notifications]
      summary: 알림 목록 조회
      description: 사용자의 알림 리스트를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 알림 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationResponse'

  /api/notifications/subscribe:
    get:
      tags: [Notifications]
      summary: 실시간 알림 SSE 구독
      description: 서버에서 실시간 알림을 SSE(Server-Sent Events)로 수신합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: SSE 연결 유지

  /api/notifications/{notificationId}/read:
    patch:
      tags: [Notifications]
      summary: 알림 읽음 처리
      description: 특정 알림을 읽음 상태로 변경합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 읽음 처리 완료
          content:
            application/json:
              schema:
                type: object
                properties:
                  notificationId:
                    type: integer
                    example: 1
                  isRead:
                    type: boolean
                    example: true
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/oauth2/authorize/{provider}:
    get:
      tags: [OAuth]
      summary: 소셜 로그인 시작
      description: 카카오, 네이버, 구글 소셜 로그인 페이지로 리다이렉트합니다.
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [kakao, naver, google]
      responses:
        '302':
          description: 소셜 로그인 페이지 리다이렉트

  /api/oauth2/callback/{provider}:
    get:
      tags: [OAuth]
      summary: 소셜 로그인 콜백 처리
      description: 소셜 로그인 후 콜백 URL로 토큰을 발급받습니다.
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [kakao, naver, google]
      responses:
        '200':
          description: 로그인 성공, JWT 토큰 발급
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
